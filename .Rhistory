args = transformed_args)
})
args <- as.pairlist(args)
#args <- formals(distribution_function)
# print(args)
rlang::new_function(args = args, body = body, env = rlang::caller_env())
#eval(call("function", args, body), env)
# body = quote({
#   print(args)
#   transformed_args = with(data = args,
#                           expr = {
#                             eval(parse(text = temp_str))
#                           })
#   do.call(what = distribution_function,
#           args = transformed_args)
# })
# f <- function() {}
# formals(f) <- transform_args(user_args, offset)
# body(f) <- body(distribution_function)
# environment(f) <- env
#
# f
}
shift_support_proper <- function(args, distribution_function, shift_args, env = parent.frame()) {
# shift_args <- shift_args
# distribution_function <- distribution_function
body = substitute({
#print(shift_args)
temp_str = paste(shift_args, collapse = ";")
print(temp_str)
args = c(as.list(environment()))
# args = list(...)
# print(args)
transformed_args = within(data = args,
expr = {
eval(parse(text = temp_str))
})
print(transformed_args)
do.call(what = distribution_function,
args = transformed_args)
})
args <- as.pairlist(args)
#args <- formals(distribution_function)
# print(args)
rlang::new_function(args = args, body = body, env = rlang::caller_env())
#eval(call("function", args, body), env)
# body = quote({
#   print(args)
#   transformed_args = with(data = args,
#                           expr = {
#                             eval(parse(text = temp_str))
#                           })
#   do.call(what = distribution_function,
#           args = transformed_args)
# })
# f <- function() {}
# formals(f) <- transform_args(user_args, offset)
# body(f) <- body(distribution_function)
# environment(f) <- env
#
# f
}
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
temp_args = alist(formals(dgeom))
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
temp_args
temp_args = formals(dgeom)
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
dgeom_shifted_programmatic(x = 1, prob = 0.7, log = FALSE)
shift_support_proper <- function(args, distribution_function, shift_args, env = parent.frame()) {
# shift_args <- shift_args
# distribution_function <- distribution_function
body = substitute({
args = c(as.list(environment()))
#print(shift_args)
temp_str = paste(shift_args, collapse = ";")
print(temp_str)
# args = list(...)
# print(args)
transformed_args = within(data = args,
expr = {
eval(parse(text = temp_str))
})
print(transformed_args)
do.call(what = distribution_function,
args = transformed_args)
})
args <- as.pairlist(args)
#args <- formals(distribution_function)
# print(args)
rlang::new_function(args = args, body = body, env = rlang::caller_env())
#eval(call("function", args, body), env)
# body = quote({
#   print(args)
#   transformed_args = with(data = args,
#                           expr = {
#                             eval(parse(text = temp_str))
#                           })
#   do.call(what = distribution_function,
#           args = transformed_args)
# })
# f <- function() {}
# formals(f) <- transform_args(user_args, offset)
# body(f) <- body(distribution_function)
# environment(f) <- env
#
# f
}
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
dgeom_shifted_programmatic(x = 1, prob = 0.7, log = FALSE)
dgeom_shifted_programmatic(x = 2, prob = 0.7, log = FALSE)
temp_args = formals(dgeom)
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
shift_support_proper <- function(args, distribution_function, shift_args, env = parent.frame()) {
# shift_args <- shift_args
# distribution_function <- distribution_function
body = substitute({
args = c(as.list(environment()))
temp_str = paste(shift_args, collapse = ";")
transformed_args = within(data = args,
expr = {
eval(parse(text = temp_str))
})
print(transformed_args)
do.call(what = distribution_function,
args = transformed_args)
})
args <- as.pairlist(args)
#args <- formals(distribution_function)
# print(args)
#rlang::new_function(args = args, body = body, env = rlang::caller_env())
eval(call("function", args, body), env)
# body = quote({
#   print(args)
#   transformed_args = with(data = args,
#                           expr = {
#                             eval(parse(text = temp_str))
#                           })
#   do.call(what = distribution_function,
#           args = transformed_args)
# })
# f <- function() {}
# formals(f) <- transform_args(user_args, offset)
# body(f) <- body(distribution_function)
# environment(f) <- env
#
# f
}
dgeom_shifted_programmatic <- shift_support_proper(args = temp_args, distribution_function = dgeom, shift_args = list("x = x - 1"))
dgeom_shifted_programmatic(x = 2, prob = 0.7, log = FALSE)
rm(shift_support_proper())
rm(shift_support_proper)
rm(dgeom_shifted)
rm(dgeom_shifted())
rm(dgeom_shifted
)
rm(dgeom_shifted_programmatic())
rm(dgeom_shifted_programmatic)
shift_support_proper <- function(args, distribution_function, shift_args, env = parent.frame()) {
# shift_args <- shift_args
# distribution_function <- distribution_function
body = substitute({
args = c(as.list(environment()))
temp_str = paste(shift_args, collapse = ";")
transformed_args = within(data = args,
expr = {
eval(parse(text = temp_str))
})
# print(transformed_args)
do.call(what = distribution_function,
args = transformed_args)
})
args <- as.pairlist(args)
#args <- formals(distribution_function)
# print(args)
#rlang::new_function(args = args, body = body, env = rlang::caller_env())
eval(call("function", args, body), env)
# body = quote({
#   print(args)
#   transformed_args = with(data = args,
#                           expr = {
#                             eval(parse(text = temp_str))
#                           })
#   do.call(what = distribution_function,
#           args = transformed_args)
# })
# f <- function() {}
# formals(f) <- transform_args(user_args, offset)
# body(f) <- body(distribution_function)
# environment(f) <- env
#
# f
}
rm(temp_args)
dgeom_shifted_programmatic <- shift_support_proper(args = formals(dgeom), distribution_function = dgeom, shift_args = list("x = x - 1"))
dgeom_shifted(x = 2, prob = 0.7, log = FALSE)
load_all()
load_all()
document()
load_all()
document()
?shift_support_proper
document()
load_all()
document()
document()
load_all()
load_all()
document()
load_all()
document()
document()
check()
load_all()
load_all()
install()
load_all()
load_all()
install(force = TRUE)
document()
load_all()
shift_support_proper(args = formals(distribution_function),
distribution_function = dgeom,
offset = "x = x -1")
supportsystem::shift_support_proper(args = formals(distribution_function),
distribution_function = dgeom,
offset = "x = x -1")
shift_support_proper(args = formals(distribution_function),
distribution_function = dgeom,
shift_args = "x = x -1")
supportsystem::shift_support_proper(args = formals(distribution_function),
distribution_function = dgeom,
shift_args = "x = x -1")
supportsystem::shift_support_proper(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1")
load_all()
load_all()
?'::'
load_all()
shift_support_proper(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1")
supportsystem::shift_support_proper(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1")
library(supportsystem)
load_all()
detach("package:supportsystem", unload = TRUE)
detach("supportsystem", unload = TRUE)
?detach
uninstall.packages("supportsystem")
?uninstall.packages
remove.packages("supportsystem")
load_all()
install()
install()
load_all()
supportsystem::shift_support_proper(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1")
remove.packages("supportsystem")
?install
install(force = TRUE)
load_all()
?utils
load_all()
load_all()
roxygen2::roxygenize()
roxygen2::roxygenize()
load_all()
document()
load_all()
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- do.call(what = shift_support_proper,
args = list(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1"))
load_all()
load_all()
?shift_support_proper
load_all()
load_all()
load_all()
load_all()
detach(supportsystem)
detach("supportsystem")
detach("package:supportsystem")
remove.packages("supportsystem")
library(supportysystem)
install(force = TRUE)
install(force = TRUE)
library(supportysystem)
install(force = TRUE)
library(supportsystem)
load_all()
load_all()
load_all()
document()
document()
?utils
load_all()
load_all()
load_all()
document()
other_util_caller()
load_all()
other_util_caller
other_util_caller()
other_util_caller(b = 20)
document()
install()
check()
install(force = TRUE)
install(force = TRUE)
other_util
load_all()
document()
shift_support(args = formals(dgeom), distribution_function = dgeom, shift_args = "x = x - 1")
load_all()
load_all()
load_all()
dgeom_shifted_programmatic(args = alist(prob = 0.7, x = 1))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- function() {
do.call(shift_support,
list(args = args,
distribution_function = dgeom,
shift_args = "x = x -1"))
#shift_support()
}
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- function(args = formals(dgeom)) {
do.call(shift_support,
list(args = args,
distribution_function = dgeom,
shift_args = "x = x -1"))
#shift_support()
}
dgeom_shifted_programmatic <- function() {
do.call(shift_support,
list(args = args,
distribution_function = dgeom,
shift_args = "x = x -1"))
}
dgeom_shifted_programmatic()
load_all()
dgeom_shifted_programmatic()
do.call(shift_support,
list(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1"))
half_programmatic_fun <- do.call(shift_support,
list(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1"))
half_programmatic_fun(x = 1, prob = 0.7)
do.call(shift_support,
list(args = args,
distribution_function = dgeom,
shift_args = "x = x -1"))
do.call(shift_support,
list(args = formals(dgeom),
distribution_function = dgeom,
shift_args = "x = x -1"))
half_programmatic_fun <- shift_support(args = formals(dgeom), distribution_function = dgeom, shift_args = "x = x-1")
half_programmatic_fun(x = 1, prob = 0.7)
load_all()
dgeom_shifted_programmatic <- function(arguments = formals(dgeom)) {
do.call(shift_support,
list(args = arguments,
distribution_function = dgeom,
shift_args = "x = x -1"))
}
dgeom_shifted_programmatic(arguments = list(prob = 0.7, x = 1))
do.call(shift_support,
list(args = arguments,
distribution_function = dgeom,
shift_args = list("x = x -1")))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- function(arguments = formals(dgeom)) {
do.call(shift_support,
list(args = arguments,
distribution_function = dgeom,
shift_args = list("x = x -1")))
}
dgeom_shifted_programmatic(arguments = list(prob = 0.7, x = 1))
eval(dgeom_shifted_programmatic(arguments = list(prob = 0.7, x = 1)))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- do.call(shift_support,
list(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1")))
dgeom_shifted_programmatic(x = 1, prob = 0.7)
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- do.call(shift_support,
list(args = args,
distribution_function = dgeom,
shift_args = list("x = x -1")))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = args,
distribution_function = dgeom,
shift_args = list("x = x -1"))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1"))
dgeom_shifted_programmatic(x = 1, prob = 0.7)
dgeom_shifted_programmatic()
dgeom_shifted_programmatic
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = args,
distribution_function = dgeom,
shift_args = list("x = x -1"))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(distribution_function = dgeom,
shift_args = list("x = x -1"))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = as.list(formals(dgeom)),distribution_function = dgeom,
shift_args = list("x = x -1"))
dgeom_shifted_programmatic()
load_all()
load_all()
shift_support(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1"))
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1"))
dgeom_shifted_programmatic(x = 1, prob = 0.7)
dgeom_shifted_programmatic(x = 2, prob = 0.7)
dgeom_shifted_programmatic(x = 3, prob = 0.7)
load_all()
other_util_caller(b = 10)
load_all()
dgeom_shifted_programmatic <- shift_support(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1"))
load_all()
#' @rdname geom_shifted
#'
#' @export
dgeom_shifted_programmatic <- shift_support(args = formals(dgeom),
distribution_function = dgeom,
shift_args = list("x = x -1"))
dgeom_shifted_programmatic(x = 2, prob = 0.7)
load_all()
load_all()
util3()
document()
load_all()
util3
util3()
util3()()
util3()
load_all()
load_all()
load_all()
util3
util3()
load_all()
util3
util3()
load_all()
stats_caller1
stats_caller1(x = 1, prob = 0.5, log = TRUE)
stats_caller1(x = 1, prob = 0.5, log = FALSE)
load_all()
load_all()
load_all()
load_all()
load_all()
document()
load_all()
stats_util()
stats_util(distribution_function = dgeom)
load_all()
load_all()
load_all()
uses_stats_util_caller2()
uses_stats_util_caller2 <- function() {
stats_util_in_same_file(stats::dgeom)
}
uses_stats_util_caller2()
load_all()
load_all()
?load_all()
